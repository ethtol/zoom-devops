name: Auto-PR-Body Generator

on:
  pull_request:

permissions:
  contents: write
  repository-projects: write
  pull-requests: write

jobs:
  generate_pr_summary:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Fetch full Git history to avoid shallow clone issues
      - name: Fetch complete history
        run: git fetch --prune --unshallow

      # Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libffi-dev build-essential python3-dev libssl-dev

      # Set up Python
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      # Install required Python packages
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai==0.28.0 requests

      # Generate PR summary using GPT-3.5-Turbo
      - name: Generate PR Summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          EVENT_PATH: ${{ github.event_path }}
        run: |
          python <<EOF
          import os
          import openai
          import subprocess
          import requests
          import json
          
          openai.api_key = os.getenv('OPENAI_API_KEY')

          # Run git diff to get full changes
          result = subprocess.run(['git', 'diff', '--unified=10', 'origin/main..HEAD'], capture_output=True, text=True)
          pr_changes = result.stdout

          # Extract changed files
          file_changes_result = subprocess.run(['git', 'diff', '--name-only', 'origin/main..HEAD'], capture_output=True, text=True)
          changed_files = file_changes_result.stdout.splitlines()

          # Filter changes to focus only on parameter updates
          filtered_changes = "\n".join([
              line for line in pr_changes.splitlines()
              if "Default" in line or "Cidr" in line or "AllowedPattern" in line or "Parameters" in line
          ])

          # Use raw diff if no filtered changes
          significant_changes = filtered_changes if filtered_changes else pr_changes[:3000]

          # Prepare the prompt with explicit instructions
          prompt_text = f"""
          The following changes were detected in the pull request:

          {significant_changes}

          Please summarize the exact modifications in **bullet-point format**.
          - **List each modified parameter with its old and new value.**
          - **Include the filename where the change occurred.**
          - **Do not generate additional explanations or modify the output structure.**

          Example output format:

          - Changed `VPCCidr` default from `10.10.12.0/24` to `10.10.10.0/24` in `APPS.yml`.
          - Changed `VPCCidr` default from `10.10.12.0/24` to `10.10.11.0/16` in `VPC.yml`.

          List all changes precisely.
          """

          # Call OpenAI API to generate the PR Summary
          response = openai.ChatCompletion.create(
              model="gpt-3.5-turbo",
              messages=[
                  {"role": "system", "content": "You are an expert DevOps assistant. Your job is to analyze infrastructure code diffs and generate structured summaries with accurate information."},
                  {"role": "user", "content": prompt_text}
              ]
          )
          
          summary = response["choices"][0]["message"]["content"]

          # Format PR description
          new_body = f"""
          ---
          ## 🤖 PR Summary generated by OpenAI:

          {summary}

          ---
          ### 📂 Affected Files:
          {', '.join(changed_files)}

          ---
          """

          # Update PR description via GitHub API
          repo = os.getenv('GITHUB_REPOSITORY')
          event_path = os.getenv('EVENT_PATH')
          with open(event_path, 'r') as f:
              event_data = json.load(f)

          pr_number = event_data['pull_request']['number']
          headers = {"Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}"}
          update_url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}"
          update_data = {"body": new_body}
          update_response = requests.patch(update_url, headers=headers, data=json.dumps(update_data))

          if update_response.status_code == 200:
              print("✅ PR Description updated successfully.")
          else:
              print(f"⚠️ Failed to update PR description. Status code: {update_response.status_code}, Response: {update_response.text}")
          EOF

name: Auto-PR-Body Generator

on:
  pull_request:

permissions:
  contents: read
  repository-projects: write
  pull-requests: write

jobs:
  generate_pr_summary:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libffi-dev build-essential python3-dev libssl-dev

      # Set up Python
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      # Install required Python packages
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai==0.28.0 requests

      # Generate PR summary using GPT-3.5-Turbo
      - name: Generate PR Summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          EVENT_PATH: ${{ github.event_path }}
        run: |
          python <<EOF
          import os
          import openai
          import requests
          import json
          
          openai.api_key = os.getenv('OPENAI_API_KEY')
          
          # Read PR number from GitHub event JSON
          event_path = os.getenv('EVENT_PATH')
          with open(event_path, 'r') as f:
              event_data = json.load(f)
          
          pr_number = event_data['pull_request']['number']
          repo = os.getenv('GITHUB_REPOSITORY')
          
          # Fetch PR details
          headers = {"Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}"}
          pr_url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}"
          
          response = requests.get(pr_url, headers=headers)
          pr_data = response.json()
          
          if 'title' not in pr_data or 'body' not in pr_data:
              print("Failed to fetch PR details.")
              exit(1)
          
          pr_title = pr_data['title']
          pr_body = pr_data.get('body', '')
          pr_changes_url = pr_data['diff_url']
          
          # Fetch PR changes (limit to first 5000 characters for prompt)
          changes_response = requests.get(pr_changes_url, headers=headers)
          pr_changes = changes_response.text[:5000]
          
          # Prepare the prompt for OpenAI
          prompt_text = f"""
          Title: {pr_title}
          Description: {pr_body}
          Changes: {pr_changes}
          
          Please provide a clear, concise summary of this PR.
          """
          
          # Call OpenAI ChatCompletion API
          response = openai.ChatCompletion.create(
              model="gpt-3.5-turbo",
              messages=[
                  {"role": "system", "content": "You are a helpful assistant that summarizes GitHub pull requests."},
                  {"role": "user", "content": prompt_text}
              ]
          )
          
          summary = response["choices"][0]["message"]["content"]
          
          # Post the summary as a comment on the PR
          comment_url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
          comment_body = {"body": f"## 📝 PR Summary:\n\n{summary}"}
          comment_response = requests.post(comment_url, headers=headers, data=json.dumps(comment_body))
          
          if comment_response.status_code == 201:
              print("✅ PR Summary posted successfully.")
          else:
              print(f"⚠️ Failed to post PR summary. Status code: {comment_response.status_code}")
          EOF
